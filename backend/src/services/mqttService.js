'use strict';

const pino = require('pino');
const logger = pino({ level: process.env.LOG_LEVEL || 'info' });
const { registerDiscovery } = require('../controllers/deviceController');

/**
 * Inicia o serviÃ§o MQTT listener.
 * @param {import('mqtt').MqttClient} client - InstÃ¢ncia MQTT jÃ¡ conectada.
 */
function initMqttService(client) {
  if (!client) {
    logger.error('MQTT client nÃ£o inicializado â€” initMqttService() recebeu undefined');
    return;
  }

  client.subscribe('easysmart/+/discovery', (err) => {
    if (err) logger.error({ err }, 'Erro ao inscrever discovery');
  });

  client.on('message', async (topic, payload) => {
    try {
      const msg = payload.toString();
      if (topic.endsWith('/discovery')) {
        const deviceId = topic.split('/')[1];
        const data = JSON.parse(msg);
        logger.info({ topic, deviceId }, 'ðŸ“¡ [DISCOVERY] Recebido discovery');

        // Persistir no banco
        await registerDiscovery(data, deviceId);
      }
      else if (topic.includes('/sensor/') && topic.endsWith('/state')) {
        const data = JSON.parse(msg);
        logger.info({ topic, data }, 'ðŸ“ˆ [SENSOR] Dados recebidos');
      }
      else if (topic.includes('/switch/') && topic.endsWith('/state')) {
        const data = JSON.parse(msg);
        logger.info({ topic, data }, 'ðŸ’¡ [SWITCH] Estado recebido');
      }
    } catch (err) {
      logger.error({ err, topic, payload: payload.toString() }, 'Erro ao processar mensagem MQTT');
    }
  });

  logger.info('âœ… ServiÃ§o MQTT ativo e escutando tÃ³picos');
}

module.exports = { initMqttService };